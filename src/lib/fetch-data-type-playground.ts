/**
 * @fileoverview this file is where i experiment with derived types for data-fetching and data-modeling
 */

import { OrderStatus } from "../data-model/enum-types";
import {
  CustomerBillingInformation,
  Order,
  OrderInvoice,
  OrderItem,
  ShippingFields,
} from "../data-model/schema-types";

export type StatusDetails = {
  statusValue: string;
  isVisible: boolean;
};

export type OrderTableRow = Order &
  Pick<OrderInvoice, "order_invoice_id"> & {
    order_items: OrderItem[];
  };

// IMPLEMENTATION NOTE: this object can be built in the front-end, maybe by using React Context,
// from data fetched from parallel queries to the order, order_invoice, and order_items tables
// instead of one large query
export type OrderFormFields = {
  // order table
  order_id: string;
  created_by: string;
  customer_id: string;
  order_name: string;
  order_number: string;
  shipping_data: ShippingFields;
  billing_data: CustomerBillingInformation;
  status: OrderStatus;
  amount: number;
  date_drafted: Date;
  date_updated: Date;
  date_submitted: Date;
  date_shipped: Date;
  date_delivered: Date;
  // order invoice table
  order_invoice_id: string; // nullable
  // customer table
  customer_name: string;
  // user table
};

export type OrderPageFields = {
  // backend fields
  order_id: string; // uuid generated by db
  created_by: string; // user_id of user that created the order
  customer_id: string; // customer_id of the customer that placed the order
  // display fields
  order_name: string;
  order_number: string;
  shipping_data: ShippingFields;
  billing_data: CustomerBillingInformation;
  status: OrderStatus;
  amount: number;
  date_drafted: Date;
  date_updated: Date;
  date_submitted: Date | null;
  date_shipped: Date | null;
  date_delivered: Date | null;
  // profile table
  ordered_by: string;
  // customer table
  customer_name: string;
};

export type InvoiceField = {
  invoice_id: string;
  invoice_number: string;
};

// export type ItemTableRow = OrderItem & Pick<InventoryProduct, "type">;
// export type ItemTableRow = OrderItem & InventoryProduct;
export type ItemTableRow = {
  order_item_id: number;
  order_id: string;
  product_type_id: string; // uuid
  product_config: any; // jsonb
  quantity: number;
  note: string;
  type: string;
};

export type InvoiceTableRow = OrderInvoice &
  Pick<Order, "order_name" | "billing_data"> & {
    customer_name: string; //UserProfile.first_name + UserProfile.last_name
  };

// drizzle experiment query types 